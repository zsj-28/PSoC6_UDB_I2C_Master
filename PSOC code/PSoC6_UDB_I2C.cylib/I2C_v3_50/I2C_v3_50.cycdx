<?xml version="1.0" encoding="us-ascii"?>

<deviceData version="1"
  xmlns="http://cypress.com/xsd/cydevicedata"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://cypress.com/xsd/cydevicedata cydevicedata.xsd">

    <block name="`$INSTANCE_NAME`" desc="" visible="true">
        <block name="`$INSTANCE_NAME`_FF" desc="" visible="`$FF`">
            <register name="XCFG"
                address="`$INSTANCE_NAME`_I2C_FF__XCFG"
                bitWidth="8" desc="I2C Extended Configuration Register">
                <field name="csr_clk_en"     from="7" to="7" access="RW" desc="This bit is used for gating system clock for the blocks core logic that is not associated with AHB interface. Clock is made available to the core logic only when this bit is set to 1 and the input pin ext_clk_en is also active. If either of them is not active, the blocks core logic does not receive the system clock.">
                </field>
                <field name="i2c_on"         from="6" to="6" access="RW" desc="This bit should be set by the user during initial block configuration if the user wants to use the I2C block as wake-up source. Only when this bit set along with other bits mentioned in the sleep mode section, the I2C wakes up system from sleep on address match.">
                </field>
                <field name="ready_to_sleep" from="5" to="5" access="R" desc="Once the user sets the force_nack bit, the I2C block sets this bit if I2C is not busy or it waits for ongoing transaction to be completed and then sets this bit. As long as this bit is set, the I2C block is going to nack all the transactions.Clearing force_nack bit automatically clears this bit. HW clears this bit automatically on assertion of PD (Power Down)">
                </field>
                <field name="force_nack"    from="4" to="4" access="RW" desc="This bit must be set by the user before putting the device to sleep and wait for ready_to_sleep status bit to be set. This can be cleared by user by writing '0' and the HW clears it automatically on assertion of PD(Power Down)">
                </field>
                <field name="hw_addr_en"    from="0" to="0" access="RW" desc="When this bit is set to a '1', hardware address compare is enabled. On an address match, an interrupt is generated, CSR register bit 3 is set, and the clock is stalled until the CPU writes a 0 into the CSR register bit 3. The address is automatically ACKed on a match. On an address mismatch,no interrupt is generated, clock is not stalled, and bit 3 in the CSR register is set. The CPU must write a 0 into the CSR register bit 3 to clear it. The address is automatically NACKed on a mismatch. You must configure the compare address in the ADR register. When this bit is set to a '0', software address compare is enabled. An interrupt is generated, the clock is stalled, and CSR register bit 3 is set when the received address byte is available in the Data register; to enable the CPU to do a firmware address compare. The clock is stalled until the CPU writes a 0 into the CSR register bit 3. The functionality of this bit is independent of the data buffering mode.">
                </field>
            </register>

            <register name="ADDR"
                address="`$INSTANCE_NAME`_I2C_FF__ADR"
                bitWidth="8" desc="I2C Slave Adddress Register">
                <field name="slave_address" from="6" to="0" access="RW" desc="These seven bits hold the slave's own device address. These bits are held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
            </register>

            <register name="CFG"
                address="`$INSTANCE_NAME`_I2C_FF__CFG"
                bitWidth="8" desc="I2C Configuration Register">
                <field name="sio_select"    from="7" to="7" access="RW" desc="I2C Pin Select for SCL/SDA lines from SIO1/SIO2, 0 = SCL and SDA lines get their inputs from SIO1 module.sclk_str1 and sda_ack1 are driven to SIO1 module and they get asserted once device wakes up from sleep. 1 = SCL and SDA lines get their inputs from SIO2 module. sclk_str2 and sda_ack2 are driven to SIO2 module and they get asserted once device wakes up from sleep. This bit is valid only when I2C.CFG[6] is asserted.">
                </field>
                <field name="pselect"       from="6" to="6" access="RW" desc="I2C Pin Select for SCL/SDA lines from GPIO/SIO, 0 = SCL and SDA lines get their inputs from GPIO module.sclk_str0 and sda_ack0 are driven to GPIO module and they get asserted once device wakes up from sleep. 1 = SCL and SDA lines get their inputs from one of the SIO Blocks that is chosen based on the configuration of bit I2C.CFG[7]">
                </field>
                <field name="bus_error_ie"  from="5" to="5" access="RW" desc="Bus Error Interrupt Enable 0 disabled 1 enabled. An interrupt is generated on the detection of a Bus error condition.">
                </field>
                <field name="stop_ie"       from="4" to="4" access="RW" desc="Stop Interrupt Enable 0 disabled 1 enabled. An interrupt is generated on the detection of a Stop condition.">
                </field>
                <field name="clock_rate"    from="2" to="2" access="RW" desc="0 Samples/bit is 16, 1 Samples/bit is 32">
               </field>
                <field name="en_mstr"       from="1" to="1" access="RW" desc="Enables master mode for the device">
                </field>
                <field name="en_slave"      from="0" to="0" access="RW" desc="Enables Slave mode for the device">
                </field>
            </register>

            <register name="CSR"
                address="`$INSTANCE_NAME`_I2C_FF__CSR"
                bitWidth="8" desc="I2C Control and Status Register">
                <field name="bus_error"     from="7" to="7" access="RW" desc="It must be cleared by firmware by writing a '0' to the bit position. It is never cleared by the hardware. 1 a misplaced Start or Stop condition was detected. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
                <field name="lost_arb"      from="6" to="6" access="RW" desc="This bit is set immediately on lost arbitration; however, it does not cause an interrupt. This status may be checked after the following Byte Complete interrupt. Any Start detect or a write to the Start or Restart generate bits (MCSR register), when operating in Master mode, will also clear the bit. 1 lost Arbitration. This bit is held zero if I2C_CFG.en_mstr is zero.">
                </field>
                <field name="stop_status"   from="5" to="5" access="RW" desc="It must be cleared by firmware with write of '0' to the bit position. It is never cleared by the hardware. 1 a Stop condition was detected. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
                <field name="ack"           from="4" to="4" access="RW" desc="Acknowledge Out. Bit is automatically cleared by hardware on a Byte Complete event. 0 nack the last received byte. 1 ack the last received byte">
                </field>
                <field name="address"       from="3" to="3" access="RW" desc="It must be cleared by firmware with write of '0' to the bit position. 1 the received byte is a slave address. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero">
                </field>
                <field name="transmit"      from="2" to="2" access="RW" desc="Bit is set by firmware to define the direction of the byte transfer. Any Start detect will clear the bit. 0 receive mode 1 transmit mode. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
                <field name="lrb"           from="1" to="1" access="RW" desc="Last Received Bit. The value of the 9th bit in a Transmit sequence, which is the acknowledge bit from the receiver. Any Start detect or a write to the Start or Restart generate bits, when operating in Master mode, will also clear the bit. 0 last transmitted byte was ACK'ed by the receiver. 1 last transmitted byte was NACK'ed by the receiver. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
                <field name="byte_complete" from="0" to="0" access="RW" desc="Transmit/Receive Mode: 0 no completed transmit/receive since last cleared by firmware. Any Start detect or a write to the start or Restart generate bits, when operating in Master mode, will also clear the bit. Transmit mode: 1 eight bits of data have been transmitted and an ACK or NACK has been received. Receive mode: 1 eight bits of data have been received. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
            </register>

            <register name="MCSR"
                address="`$INSTANCE_NAME`_I2C_FF__MCSR"
                bitWidth="8" desc="Master Control and Status Register: I2C_MCSR">
                <field name="stop_gen"      from="4" to="4" access="RW" desc="This bit is set only for master transmitter and used at the end of byte transfer. After byte complete status is set, if this bit is set followed by the Transmit bit in I2C.CSR register, Stop condition is generated after byte complete. This bit is automatically reset to 0 after the Stop, start or Restart has been generated. During data phase, if Stop Gen bit is set to 0, clearing the Transmit bit in I2C.CSR register will also generate a Stop condition. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
                <field name="bus_busy"      from="3" to="3" access="R" desc="This bit is set to the following. 0 when a Stop condition is detected (from any bus master). 1 when a Start condition is detected (from any bus master). This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
                <field name="master_mode"   from="2" to="2" access="R" desc="This bit is set/cleared by hardware when the device is operating as a master. 0 stop condition detected, generated by this device. 1 start condition detected, generated by this device. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
                <field name="restart_gen"   from="1" to="1" access="RW" desc="This bit is cleared by hardware when the Restart generation is complete. 0 restart generation complete. 1 generate a Restart condition. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
                <field name="start_gen"     from="0" to="0" access="RW" desc="This bit is cleared by hardware when the Start generation is complete. 0 start generation complete. 1 generate a Start condition and send a byte (address) to the I2C bus, if bus is not busy. This bit is held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
            </register>

            <register name="DATA"
                address="`$INSTANCE_NAME`_I2C_FF__D"
                bitWidth="8" desc="I2C Data Register">
                <field name="data" from="7" to="0" access="RW" desc="Read received data or write data to transmit. These bits are held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
            </register>

            <register name="CLK_DIV1"
                address="`$INSTANCE_NAME`_I2C_FF__CLK_DIV1"
                bitWidth="8" desc="I2C Clock Divide Factor Register-1">
                <field name="Div" from="7" to="0" access="RW" desc="The configuration of this register along with that in register CLK_DIV2 defines the factor by which the SYSCLK will be divided in the I2C block. These bits are held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
           </register>

            <register name="CLK_DIV2"
                address="`$INSTANCE_NAME`_I2C_FF__CLK_DIV2"
                bitWidth="8" desc="I2C Clock Divide Factor Register-2">
                <field name="Div" from="1" to="0" access="RW" desc="The configuration of this register along with that in register CLK_DIV1 defines the factor by whichthe SYSCLK will be divided in the I2C block. These bits are held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
            </register>

            <block name="" desc="PSOC5LP_TMOUT" visible="`$Psoc5lpffSelected`">
                <register name="TMOUT_CSR"
                    address="`$INSTANCE_NAME`_I2C_FF__TMOUT_CSR"
                    bitWidth="8" desc="I2C Timerout Control and Status Register">
                    <field name="sda_pin_status"            from="4" to="4" access="RW" desc="SDA Line status.">
                    </field>
                    <field name="scl_pin_status"            from="3" to="3" access="RW" desc="SCL Line status.">
                    </field>
                    <field name="i2c_timeout_int_enable"    from="2" to="2" access="R" desc="I2C Timeout interrupt enable.">
                    </field>
                    <field name="i2c_sda_timeout_enable"    from="1" to="1" access="RW" desc="I2C SDA Timeout enable.">
                    </field>
                    <field name="i2c_scl_timeout_enable"    from="0" to="0" access="RW" desc="I2C SCL Timeout enable.">
                    </field>
                </register>

                <register name="TMOUT_SR"
                    address="`$INSTANCE_NAME`_I2C_FF__TMOUT_SR"
                    bitWidth="8" desc="I2C Timerout Status Register">
                    <field name="sda_tmout_status"  from="1" to="1" access="RW" desc="SDA Timeout status.">
                    </field>
                    <field name="scl_tmout_status"  from="0" to="0" access="RW" desc="SCL Timeout status.">
                    </field>
                </register>

                <register name="TMOUT_CFG0"
                    address="`$INSTANCE_NAME`_I2C_FF__TMOUT_CFG0"
                    bitWidth="8" desc="I2C Timerout Period Configuration Register-0">
                    <field name="timeout_period_lowbyte"    from="7" to="0" access="RW" desc="The configuration of this register along with that in register TMOUT_CFG1 to define the number units before SCL or SDA stuck low timeout triggers the I2C interrupt. The one unit is equal to SYSCLK/1024. The TMOUT_CFG0 defines lower byte of the period.">
                    </field>
                </register>

                <register name="TMOUT_CFG1"
                    address="`$INSTANCE_NAME`_I2C_FF__TMOUT_CFG1"
                    bitWidth="8" desc="Extended Configuration Register: TMOUT_CFG1">
                    <field name="timeout_period_highnibble"    from="3" to="0" access="RW" desc="The configuration of this register along with that in register TMOUT_CFG1 to define the number units before SCL or SDA stuck low timeout triggers the I2C interrupt. The one unit is equal to SYSCLK/1024. The TMOUT_CFG1 defines higher octet of the period.">
                    </field>
                </register>
            </block>
        </block>

        <block name="`$INSTANCE_NAME`" desc="" visible="`$UDB_SLV`">
            <register name="CFG"
                address="`$INSTANCE_NAME`_bI2C_UDB_`$CtlModeReplacementString`_CtrlReg__CONTROL_REG"
                bitWidth="8" desc="I2C Configuration Register">
                <field name="nack"           from="4" to="4" access="RW" desc="If set, used to NAK the last byte received. This bit must be cleared by firmware between bytes.">
                </field>
                <field name="hw_addr_en"    from="3" to="3" access="RW" desc="If set, used to enable the device to respond any device addresses it receives rather than just the single address provided in I2C_ADDRESS.">
                </field>
                <field name="transmit"      from="2" to="2" access="RW" desc="Used to set the mode to transmit or receive data. This bit must be cleared by firmware between bytes. Set = transmit and cleared = receive.">
                </field>
                <field name="slave_en"      from="0" to="0" access="RW" desc="Set to 1 to enable the slave functionality.">
                </field>
            </register>

            <register name="CSR"
                address="`$INSTANCE_NAME`_bI2C_UDB_StsReg__STATUS_REG"
                bitWidth="8" desc="I2C Status Register">
                <field name="stop_status"   from="5" to="5" access="R" desc="If set, indicates a Stop condition was detected on the bus.">
                </field>
                <field name="address"       from="3" to="3" access="R" desc="Address detection. If set, indicates that an address byte was sent.">
                </field>
                <field name="lrb"           from="1" to="1" access="R" desc="Last Received Bit. Indicates the state of the last received bit, which is the ACK/NAK received for the last byte transmitted. Cleared = ACK and set = NAK.">
                </field>
                <field name="byte_complete" from="0" to="0" access="R" desc="Transmit or receive status since the last read of this register. In Transmit mode this bit indicates that eight bits of data plus ACK/NAK have been transmitted since the last read. In Receive mode this bit indicates that eight bits of data have been received since the last read of this register.">
                </field>
            </register>

            <register name="INT_MASK"
                address="`$INSTANCE_NAME`_bI2C_UDB_StsReg__MASK_REG"
                bitWidth="8" desc="I2C Interrupt Enable Mask">
                <field name="stop_status"   from="5" to="5" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="address"       from="3" to="3" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="lrb"           from="1" to="1" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="byte_complete" from="0" to="0" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
            </register>

            <register name="ADDR"
                address="`$INSTANCE_NAME`_bI2C_UDB_Shifter_u0__D0_REG"
                bitWidth="8" desc="I2C Slave Adddress Register">
                <field name="slave_address" from="6" to="0" access="RW" desc="These seven bits hold the slave's own device address.">
                </field>
            </register>

            <register name="DATA"
                address="`$INSTANCE_NAME`_bI2C_UDB_Shifter_u0__A0_REG"
                bitWidth="8" desc="I2C Data Register">
                <field name="data" from="7" to="0" access="RW" desc="Read received data or write data to transmit. These bits are held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
            </register>
        </block>

        <block name="`$INSTANCE_NAME`" desc="" visible="`$UDB_MSTR`">
            <register name="CFG"
                address="`$INSTANCE_NAME`_bI2C_UDB_`$CtlModeReplacementString`_CtrlReg__CONTROL_REG"
                bitWidth="8" desc="I2C Configuration Register">
                <field name="start_gen"     from="7" to="7" access="RW" desc="Set to 1 to generate a Start condition on the bus. This bit must be cleared by firmware before initiating the next transaction.">
                </field>
                <field name="stop_gen"      from="6" to="6" access="RW" desc="Set to 1 to generate a Stop condition on the bus. This bit must be cleared by firmware before initiating the next transaction.">
                </field>
                <field name="restart_gen"   from="5" to="5" access="RW" desc="Set to 1 to generate a Restart condition on the bus. This bit must be cleared by firmware after a Restart condition is generated.">
                </field>
                <field name="nack"           from="4" to="4" access="RW" desc="Set to 1 to NAK the next read byte. Clear to ACK next read byte. This bit must be cleared by firmware between bytes.">
                </field>
                <field name="transmit"      from="2" to="2" access="RW" desc="Set to 1 to set the current mode to transmit or clear to 0 to receive a byte of data. This bit must be cleared by firmware before starting the next transmit or receive transaction.">
                </field>
                <field name="master_en"     from="1" to="1" access="RW" desc="Set to 1 to enable the master functionality.">
                </field>
            </register>

            <register name="CSR"
                address="`$INSTANCE_NAME`_bI2C_UDB_StsReg__STATUS_REG"
                bitWidth="8" desc="I2C Status Register">
                <field name="lost_arb"      from="6" to="6" access="R" desc="If set, indicates arbitration was lost (multi-master and multi-master-slave modes).">
                </field>
                <field name="stop_status"   from="5" to="5" access="R" desc="If set, indicates a Stop condition was detected on the bus.">
                </field>
                <field name="bus_busy"      from="4" to="4" access="R" desc="If set, indicates the bus is busy. Data is currently being transmitted or received.">
                </field>
                <field name="address"       from="3" to="3" access="R" desc="Address detection. If set, indicates that an address byte was sent.">
                </field>
                <field name="master_mode"   from="2" to="2" access="R" desc="Indicates that a valid Start condition was generated and a hardware device is operating as bus master.">
                </field>
                <field name="lrb"           from="1" to="1" access="R" desc="Last Received Bit. Indicates the state of the last received bit, which is the ACK/NAK received for the last byte transmitted. Cleared = ACK and set = NAK.">
                </field>
                <field name="byte_complete" from="0" to="0" access="R" desc="Transmit or receive status since the last read of this register. In Transmit mode this bit indicates that eight bits of data plus ACK/NAK have been transmitted since the last read. In Receive mode this bit indicates that eight bits of data have been received since the last read of this register.">
                </field>
            </register>

            <register name="INT_MASK"
                address="`$INSTANCE_NAME`_bI2C_UDB_StsReg__MASK_REG"
                bitWidth="8" desc="I2C Interrupt Enable Mask">
                <field name="lost_arb"      from="6" to="6" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="stop_status"   from="5" to="5" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="bus_busy"      from="4" to="4" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="address"       from="3" to="3" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="master_mode"   from="2" to="2" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="lrb"           from="1" to="1" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="byte_complete" from="0" to="0" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
            </register>

            <register name="DATA"
                address="`$INSTANCE_NAME`_bI2C_UDB_Shifter_u0__A0_REG"
                bitWidth="8" desc="I2C Data Register">
                <field name="data" from="7" to="0" access="RW" desc="Read received data or write data to transmit.">
                </field>
            </register>
        </block>

        <block name="`$INSTANCE_NAME`" desc="" visible="`$UDB_MULTI_MASTER_SLAVE`">
           <register name="CFG"
                address="`$INSTANCE_NAME`_bI2C_UDB_`$CtlModeReplacementString`_CtrlReg__CONTROL_REG"
                bitWidth="8" desc="I2C Configuration Register">
                <field name="start_gen"     from="7" to="7" access="RW" desc="Set to 1 to generate a Start condition on the bus. This bit must be cleared by firmware before initiating the next transaction.">
                </field>
                <field name="stop_gen"      from="6" to="6" access="RW" desc="Set to 1 to generate a Stop condition on the bus. This bit must be cleared by firmware before initiating the next transaction.">
                </field>
                <field name="restart_gen"   from="5" to="5" access="RW" desc="Set to 1 to generate a Restart condition on the bus. This bit must be cleared by firmware after a Restart condition is generated.">
                </field>
                <field name="nack"          from="4" to="4" access="RW" desc="Set to 1 to NAK the next read byte. Clear to ACK next read byte. This bit must be cleared by firmware between bytes.">
                </field>
                <field name="hw_addr_en"    from="3" to="3" access="RW" desc="If set, used to enable the device to respond any device addresses it receives rather than just the single address provided in I2C_ADDRESS.">
                </field>
                <field name="transmit"      from="2" to="2" access="RW" desc="Set to 1 to set the current mode to transmit or clear to 0 to receive a byte of data. This bit must be cleared by firmware before starting the next transmit or receive transaction.">
                </field>
                <field name="master_en"     from="1" to="1" access="RW" desc="Set to 1 to enable the master functionality.">
                </field>
                <field name="slave_en"      from="0" to="0" access="RW" desc="Set to 1 to enable the slave functionality.">
                </field>
            </register>

            <register name="CSR"
                address="`$INSTANCE_NAME`_bI2C_UDB_StsReg__STATUS_REG"
                bitWidth="8" desc="I2C Status Register">
                <field name="lost_arb"      from="6" to="6" access="R" desc="If set, indicates arbitration was lost (multi-master and multi-master-slave modes).">
                </field>
                <field name="stop_status"   from="5" to="5" access="R" desc="If set, indicates a Stop condition was detected on the bus.">
                </field>
                <field name="bus_busy"      from="4" to="4" access="R" desc="If set, indicates the bus is busy. Data is currently being transmitted or received.">
                </field>
                <field name="address"       from="3" to="3" access="R" desc="Address detection. If set, indicates that an address byte was sent.">
                </field>
                <field name="master_mode"   from="2" to="2" access="R" desc="Indicates that a valid Start condition was generated and a hardware device is operating as bus master.">
                </field>
                <field name="lrb"           from="1" to="1" access="R" desc="Last Received Bit. Indicates the state of the last received bit, which is the ACK/NAK received for the last byte transmitted. Cleared = ACK and set = NAK.">
                </field>
                <field name="byte_complete" from="0" to="0" access="R" desc="Transmit or receive status since the last read of this register. In Transmit mode this bit indicates that eight bits of data plus ACK/NAK have been transmitted since the last read. In Receive mode this bit indicates that eight bits of data have been received since the last read of this register.">
                </field>
            </register>

            <register name="INT_MASK"
                address="`$INSTANCE_NAME`_bI2C_UDB_StsReg__MASK_REG"
                bitWidth="8" desc="I2C Interrupt Enable Mask">
                <field name="lost_arb"      from="6" to="6" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="stop_status"   from="5" to="5" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="bus_busy"      from="4" to="4" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="address"       from="3" to="3" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="master_mode"   from="2" to="2" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="lrb"           from="1" to="1" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
                <field name="byte_complete" from="0" to="0" access="RW" desc="Enables interrupt from the corresponding bit in status register.">
                </field>
            </register>

            <register name="ADDR"
                address="`$INSTANCE_NAME`_bI2C_UDB_Shifter_u0__D0_REG"
                bitWidth="8" desc="I2C Slave Adddress Register">
                <field name="slave_address" from="6" to="0" access="RW" desc="These seven bits hold the slave's own device address.">
                </field>
            </register>

            <register name="DATA"
                address="`$INSTANCE_NAME`_bI2C_UDB_Shifter_u0__A0_REG"
                bitWidth="8" desc="I2C Data Register">
                <field name="data" from="7" to="0" access="RW" desc="Read received data or write data to transmit. These bits are held zero if I2C_CFG.en_mstr and I2C_CFG.en_slave are both zero.">
                </field>
            </register>
        </block>
    </block>
</deviceData>